### 重载  
- 定义：方法名相同，参数不同的方法。
- 注意事项：
	1. 与参数名称无关；
	2. 与返回值类型无关；
	3. 与修饰符无关(public static)
	
----------------------------------

### 数组
- 定义：存放相同数据类型的容器
- 直接打印数组名称：得到数组对应的内存地址hash值；
- 默认值：
	1. 整数:0
	2. 浮点数：0.0
	3. 字符：'\u0000'
	4. 布尔：false
	5. 引用：null
- 数组一旦创建，程序运行期间，长度不可改变

----------------------------------

### java的内存划分 
- 1.栈 (stack)：存放的都是方法的局部变量。方法的运行一定在栈中；
- 2.堆 (Heap)：凡是new出来的东西，都在堆内存中；
	1. 堆内存里面的东西都有一个地址值：16进制；
	2. 堆内存里面的数据都有默认值，规则：
		- 整数:0
		- 浮点数：0.0
		- 字符：'\u0000'
		- 布尔：false
		- 引用：null
- 3.方法区(Method Area)：存储.class相关信息，包含方法的信息；
- 4.本地方法栈(Native Method Area): 与操作系统相关
- 5.寄存器(pc Register):与cpu相关

----------------------------------

### 成员变量和局部变量
- 定义位置不一样
	- 局部变量：在方法的内部
	- 成员变量：在方法外部，直接写在了类当中
- 作用方范围不一样
	- 局部变量：只作用在方法中
	- 成员变量：整个类
- 默认值不一样
	- 局部变量：没有默认值，要使用则需手动赋值，没复制不能用，**方法的参数**也是局部变量，但是可以不手动
				赋值直接使用，因为调用方法的时候必定赋值传参
	- 成员变量：有默认值，和数组一样
- 内存位置不一样
	- 局部变量：位于栈内存(跟着方法走的)
	- 局部变量: 位于堆内存(new对象的时候一起创建)
- 生命周期
	- 局部变量：随着方法进栈创建，方法出栈消失
	- 成员变量： 随着对象创建而创建，随着对象被gc回收而始放；
	
---------------------------------

### 面向对象的特征
- 三大特征：封装、继承、多态  
	- 封装在java中的体现
		1. 方法就是一种封装
		2. 关键字private也是一种封装
#### priate关键字
- 被private修饰的变量，本类当中可以随意访问，超出本类范围不可直接访问，类外可以通过get/set方法访问
	
---------------------------------

### 引用类型的一般使用步骤
1. 非基本类型都是引用类型；
2. 步骤
	1. 导包  
		如果要使用的目标类和当前类位于统一路径下，则可省略导包语句  
		只有java.lang包下的不需要导包，其他都需要
	2. 创建
	3. 使用
	
---------------------------------

#### 匿名对象
- 示例：
	1. 从键盘输入一个数字  
		常规写法  
		```
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();
		```
		使用匿名对象写法：`int num = new Scanner(System.in).nextInt();` 
	2. 使用匿名对象传参  
	方法定义： `public static void methodScanner(Scanner sc){}`  
	常规写法  
		```
		Scanner sc = new Scanner(System.in);
		methodScanner(sc);
		```
		使用匿名对象写法：`methodScanner(new Scanner(System.in));` 
- 说明：只需要使用一次，可以不用创建对象，节约代码，直接new了使用，不用将new出来的地址赋值给对象；

---------------------------------	

#### ArrayList
1. ArrayList<E> : <E>代表泛型；
	- 泛型：装载在集合当中的所有类型相同的元素，必须是引用类型，不能是基本类型；
	- 如果想在ArrayList使用基本类型，必须使用基本类型的包装类
	- 对于ArrayList来说，直接打印的不是地址值，而是内容，如果内容为空，则为[]；
	- 常用方法：
		- public boolean add (E e):向集合中添加元素动作是否成功，返回值为true或false，对与arrayList一定是成功
		- public E get(int index):从集合中获取元素，参数是索引编号，返回对应位置元素，从0开始；
		- public E remove(int index):从集合中指定索引编号位置的元素，返回值是被删除的元素
		- public int size():获取集合长度，返回值为集合中元素个数；
	
---------------------------------

#### 字符串
1. 字符串的特点
	- 字符串内容永不可变；【重点】
	- 所以字符串是可以共享使用的
	- 效果相当于char[]，但是底层原理是byte[]字节数组
	- "hello"是一个字符串对象：双引号字符串就是一个未定义对象名的字符串对象；
2. 创建字符串的3+1种方式(三种构造方法，一种直接创建)
	- 三种构造方法
		- public String():创建空白字符串
		- public String(char[] array):根据字符数组的内容创建对应的字符串
		- public String(byte[] array):根据字节数组的内容创建对应的字符串
	- 一种直接创建
		- String str = "";
3. 字符串常量池
	- String str = "abc";
	- 直接写上双引号的字符串，就在字符串常量池种；
	- 对于基本类型，==是进行数值的比较
	- 对于引用类型，==是进行地址值的比较
4. 常用方法
	- equals(Object obj) ：比较字符串的内容
	- 如果比较双方是一个常量一个变量，推荐常量写在前面，即："abc".equals(str)，不推荐str.equals("abc"),防止当str为null的时候报空指针异常
	- equalsIgnoreCase(Object obj):忽略英文大小写，进行比较
	- length():获取长度
	- concat(String str):将当前字符串与参数字符串拼接并返回，当前字符串不会变
	- char(int index):获取指定索引位置的单个字符
	- indexof(String str):查找参数字符串在当前字符串中第一次出现的位置，没有则返回-1
	- substring(int index):从索引位置开始截取到末尾
	- substring(int begin,int end)：区间截取[begin,end)
	- toCharArray():将当前字符串转成字符数组，返回值为char[]
	- getBytes()
	- replace(charSeq oldString , charSeq newString)
	- split(String regex):按照参数规则分隔字符串，返回值为String[]，不能用"."切，必须要"\\."转义
	
---------------------------------

#### static关键字
1. 静态方法，跟对象没关系，属于类的，调用的时候类名.方法名，在本类中可直接用方法名调用；
2. 静态变量，用类名称.变量名调用；
3. 注意事项：	
	- 静态只能直接访问静态，不能直接访问非静态(原因：静态在内存中出现比非静态早)
	- 非静态能直接访问静态
4. 静态代码块
		``` 
		public class MyClass{
			static
		}
		```


